name: assignment3

on:
  push:

env:
  LOG_FILE: log.txt
  SUBMITTERS: "Katherine Berger" 

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      BUILD_STATUS: ${{ steps.build_status.outputs.status }}
    steps:
    - uses: actions/checkout@v4
    - name: Record start time
      run: echo "WORKFLOW_START=$(date -Iminutes)" >> $GITHUB_ENV
    - name: Build with Docker Compose
      run: docker compose build
    - name: Record build status
      id: build_status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "status=image successfully built" >> $GITHUB_OUTPUT
        else
          echo "status=image not able to be built" >> $GITHUB_OUTPUT
        fi
    - name: Upload artifact  # This step uploads the Docker image as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: books  # Name of the artifact
        path: /tmp/image.tar  # Path to the Docker image tar file

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and run services
        run: |
          docker-compose up -d

      - name: Run tests
        run: |
          pytest -v app/tests/test_word.py > assn3_test_results.txt

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: assn3_test_results.txt

      - name: Shutdown services
        run: |
          docker-compose down

  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Start services with Docker Compose
      run: docker compose up -d
    - name: Wait for services to be ready
      run: sleep 10
    - name: Post initial books
      run: |
        book_data=$(cat << EOF
        {
          "book1": {"title":"Adventures of Huckleberry Finn", "ISBN":"9780520343641", "genre":"Fiction"},
          "book2": {"title":"The Best of Isaac Asimov", "ISBN":"9780385050784", "genre":"Science Fiction"},
          "book3": {"title":"Fear No Evil", "ISBN":"9780394558783", "genre":"Biography"},
          "book6": {"title": "The Adventures of Tom Sawyer", "ISBN": "9780195810400", "genre": "Fiction"},
          "book7": {"title": "I, Robot", "ISBN": "9780553294385", "genre": "Science Fiction"},
          "book8": {"title": "Second Foundation", "ISBN": "9780553293364", "genre": "Science Fiction"}
        }
        EOF
        )
        for book in 1 2 3 6 7 8; do
          echo $book_data | jq -c ".book${book}" | \
          curl -X POST -H "Content-Type: application/json" -d @- http://localhost:5001/books
        done
    - name: Process queries
      run: |
        > response.txt
        while IFS= read -r query; do
          echo "query: $query" >> response.txt
          response=$(curl -s -w "\n%{http_code}" "http://localhost:5001/books$query")
          status_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')
          if [ "$status_code" -eq 200 ]; then
            echo "response: $body" >> response.txt
          else
            echo "response: error $status_code" >> response.txt
          fi
          echo "" >> response.txt
        done < query.txt
    - name: Upload response file
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: query-response
        path: response.txt
    - name: Stop Docker Compose
      if: always()
      run: docker compose down

  generate-log:
    needs: [build, test, query]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Create log file
      run: |
        echo "$(date -Iminutes)" > ${{ env.LOG_FILE }}
        echo "" >> ${{ env.LOG_FILE }}
        echo "${{ env.SUBMITTERS }}" >> ${{ env.LOG_FILE }}
        echo "" >> ${{ env.LOG_FILE }}
        echo "${{ needs.build.outputs.BUILD_STATUS || 'Build status unknown' }}" >> ${{ env.LOG_FILE }}
        echo "" >> ${{ env.LOG_FILE }}
        echo "${{ needs.test.outputs.CONTAINER_STATUS || 'Container status unknown' }}" >> ${{ env.LOG_FILE }}
        echo "" >> ${{ env.LOG_FILE }}
        echo "${{ needs.test.outputs.TEST_STATUS || 'Test status unknown' }}" >> ${{ env.LOG_FILE }}
    - name: Display log file contents
      run: cat ${{ env.LOG_FILE }}
    - name: Upload log file
      uses: actions/upload-artifact@v4
      with:
        name: workflow-log
        path: ${{ env.LOG_FILE }}