name: assignment3

on:
  push:

env:
  LOG_FILE: log.txt
  SUBMITTERS: "Katherine Berger"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker images
        run: |
          docker-compose build
          # Check if docker-compose build was successful
          docker-compose up -d
          sleep 10
          docker-compose down
          docker-compose ps | grep -q "Up"
          if [ $? -eq 0 ]; then
            echo "image successfully built" > build_status.txt
          else
            echo "image not able to be built" > build_status.txt
            exit 1  # Exit with failure if build was not successful
          fi

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and run services
        run: |
          docker-compose up -d

      - name: Wait for containers to be ready
        run: sleep 10

      - name: Check container status
        id: check_container
        run: |
          docker ps --filter "name=books" --format "{{.Status}}" | grep -q "Up"
          CONTAINER_STATUS=$?
          if [ $CONTAINER_STATUS -eq 0 ]; then
            echo "Container up and running" > container_status.txt
          else
            echo "Container failed to run" > container_status.txt
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run tests
        run: |
          pytest -v app/tests/assn3_tests.py > assn3_test_results.txt

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: assn3_test_results.txt

      - name: Shutdown services
        run: |
          docker-compose down

  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Start services with Docker Compose
        run: docker compose up -d
      - name: Wait for services to be ready
        run: sleep 10
      - name: Post initial books
        run: |
          book_data=$(cat << EOF
          {
            "book1": {"title":"Adventures of Huckleberry Finn", "ISBN":"9780520343641", "genre":"Fiction"},
            "book2": {"title":"The Best of Isaac Asimov", "ISBN":"9780385050784", "genre":"Science Fiction"},
            "book3": {"title":"Fear No Evil", "ISBN":"9780394558783", "genre":"Biography"},
            "book6": {"title": "The Adventures of Tom Sawyer", "ISBN": "9780195810400", "genre": "Fiction"},
            "book7": {"title": "I, Robot", "ISBN": "9780553294385", "genre": "Science Fiction"},
            "book8": {"title": "Second Foundation", "ISBN": "9780553293364", "genre": "Science Fiction"}
          }
          EOF
          )
          for book in 1 2 3 6 7 8; do
            echo $book_data | jq -c ".book${book}" | \
            curl -X POST -H "Content-Type: application/json" -d @- http://localhost:5001/books
          done
      - name: Process queries
        run: |
          > response.txt
          while IFS= read -r query; do
            echo "query: $query" >> response.txt
            response=$(curl -s -w "\n%{http_code}" "http://localhost:5001/books$query")
            status_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | sed '$d')
            if [ "$status_code" -eq 200 ]; then
              echo "response: $body" >> response.txt
            else
              echo "response: error $status_code" >> response.txt
            fi
            echo "" >> response.txt
          done < query.txt
      - name: Upload response file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: query-response
          path: response.txt
      - name: Stop Docker Compose
        if: always()
        run: docker compose down

  generate-log:
    needs: [build, test, query]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create log file
        run: |
          echo "$(date -Iminutes)" > ${{ env.LOG_FILE }}
          echo "" >> ${{ env.LOG_FILE }}
          echo "${{ env.SUBMITTERS }}" >> ${{ env.LOG_FILE }}
          echo "" >> ${{ env.LOG_FILE }}
          if [ -f "build_status.txt" ]; then
            cat build_status.txt >> ${{ env.LOG_FILE }}
          else
            echo "Build status unknown" >> ${{ env.LOG_FILE }}
          fi
          echo "" >> ${{ env.LOG_FILE }}
          if [ -f "container_status.txt" ]; then
            cat container_status.txt >> ${{ env.LOG_FILE }}
          else
            echo "Container status unknown" >> ${{ env.LOG_FILE }}
          fi
          echo "" >> ${{ env.LOG_FILE }}
          echo "${{ needs.test.outputs.TEST_STATUS || 'Test status unknown' }}" >> ${{ env.LOG_FILE }}

      - name: Display log file contents
        run: cat ${{ env.LOG_FILE }}

      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: workflow-log
          path: ${{ env.LOG_FILE }}
